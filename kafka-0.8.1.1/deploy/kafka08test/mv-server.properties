# Server Basics
broker.id=0

host.name=kf1dg.prod.mediav.com
port=9092

log.dirs=/data1/kafka-logs,/data2/kafka-logs,/data3/kafka-logs
zookeeper.connect=kf1dg.prod.mediav.com:2181,kf2dg.prod.mediav.com:2181,kf3dg.prod.mediav.com:2181/kafka08test

# Replication configurations
default.replication.factor=2
num.replica.fetchers=14
replica.fetch.max.bytes=10485760
replica.fetch.wait.max.ms=500
replica.high.watermark.checkpoint.interval.ms=5000
replica.socket.timeout.ms=30000
replica.socket.receive.buffer.bytes=65536
replica.lag.time.max.ms=10000
replica.lag.max.messages=4000

controller.socket.timeout.ms=30000
controller.message.queue.size=10

# auto create topics
auto.create.topics.enable=true
# broker will move all leaders on it before shutting itself down.
controlled.shutdown.enable=true
# automatically try to balance leadership for partitions among the brokers
auto.leader.rebalance.enable=true

# Log configuration
num.partitions=6
message.max.bytes=10000000
log.index.interval.bytes=4096
log.index.size.max.bytes=10485760
log.retention.hours=40
log.flush.interval.ms=3000
log.flush.interval.messages=20000
log.flush.scheduler.interval.ms=2000
log.roll.hours=24
log.retention.check.interval.ms=300000
#log.file.size
log.segment.bytes=1073741824

# ZK configuration
zookeeper.connection.timeout.ms=6000
zookeeper.sync.time.ms=2000

# Socket server configuration
num.io.threads=12
num.network.threads=8
socket.request.max.bytes=104857600
socket.receive.buffer.bytes=1048576
socket.send.buffer.bytes=1048576
queued.max.requests=16
fetch.purgatory.purge.interval.requests=100
producer.purgatory.purge.interval.requests=100
